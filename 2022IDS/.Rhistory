step2 = NA
step3 = NA
step4 = NA
for (i in 1:length(exist)){
if (exist[i] == '개요()'){
step1_unclean <- steps[i] %>%
html_nodes('p') %>%
html_nodes('span') %>%
html_text()
step1 <- gsub('\\t|\\n|\\r', '', step1_unclean)
}else if (exist[i] == '감독'){
step2 <- steps[i] %>%
html_nodes('p') %>%
html_text()
}else if (exist[i] == '출연'){
step3 <- steps[i] %>%
html_text()
}else if (exist[i] == '등급'){
step4_unclean <- steps[i] %>%
html_nodes('p') %>%
html_text()
step4 <- gsub('\\t|\\n|\\r', '', step4_unclean)
}
}
if (length(step1) == 3){ # 개봉일자가 존재하지 않는 경우 결측값으로 처리함 ex)먼 훗날 우리
step1 = c(step1, NA)
}
tdt <- html %>%
html_nodes('div[class=viewing_graph]')
# 성별, 나이별 관람추이가 존재하지 않는 경우 관람객 통계가 존재하지 않으므로 결측값으로 처리함
if (length(tdt) == 0){
audience_age_10 <- NA
audience_age_20 <- NA
audience_age_30 <- NA
audience_age_40 <- NA
audience_age_50 <- NA
audience_score <- NA
audience_count <- NA
audience_male <- NA
audience_female <- NA
audience_10 <- NA
audience_20 <- NA
audience_30 <- NA
audience_40 <- NA
audience_50 <- NA
} else {
audi_age <- html %>%
html_nodes('strong[class=graph_percent]') %>%
html_text()
audience_age_10 <- audi_age[1]
audience_age_20 <- audi_age[2]
audience_age_30 <- audi_age[3]
audience_age_40 <- audi_age[4]
audience_age_50 <- audi_age[5]
audience_score <- html %>%
html_nodes('div[class=grade_audience]') %>%
html_nodes('div[class=star_score]') %>%
html_nodes('em') %>%
html_text() %>% paste(collapse='')
audience_count <- html %>%
html_nodes('div[class=grade_audience]') %>%
html_nodes('span[class=user_count]') %>%
html_nodes('em') %>%
html_text() %>% paste(collapse='')
audience_male <- (html %>%
html_nodes('div[class=graph_area]') %>%
html_nodes('div[class=grp_male]') %>%
html_nodes('strong[class=graph_point]') %>%
html_text())[2]
audience_female <- (html %>%
html_nodes('div[class=graph_area]') %>%
html_nodes('div[class=grp_female]') %>%
html_nodes('strong[class=graph_point]') %>%
html_text())[2]
audience_age <- html %>%
html_nodes('div[class=grp_age]') %>%
html_nodes('strong[class=graph_point]') %>%
html_text()
audience_10 <- audience_age[6]
audience_20 <- audience_age[7]
audience_30 <- audience_age[8]
audience_40 <- audience_age[9]
audience_50 <- audience_age[10]
}
netizen_score <- html %>%
html_nodes('div[class=grade_netizen]') %>%
html_nodes('div[class=star_score]') %>%
html_nodes('em') %>%
html_text() %>% paste(collapse='')
netizen_count <- html %>%
html_nodes('div[class=grade_netizen]') %>%
html_nodes('span[class=user_count]') %>%
html_nodes('em') %>%
html_text() %>% paste(collapse='')
ntz_male <- (html %>%
html_nodes('div[class=graph_area]') %>%
html_nodes('div[class=grp_male]') %>%
html_nodes('strong[class=graph_point]') %>%
html_text())[1]
ntz_female <- (html %>%
html_nodes('div[class=graph_area]') %>%
html_nodes('div[class=grp_female]') %>%
html_nodes('strong[class=graph_point]') %>%
html_text())[1]
ntz_age <- html %>%
html_nodes('div[class=grp_age]') %>%
html_nodes('strong[class=graph_point]') %>%
html_text()
ntz_10 <- ntz_age[1]
ntz_20 <- ntz_age[2]
ntz_30 <- ntz_age[3]
ntz_40 <- ntz_age[4]
ntz_50 <- ntz_age[5]
return(c(title, code, step1, step2, step3, step4, audience_age_10, audience_age_20, audience_age_30,
audience_age_40, audience_age_50, netizen_score, netizen_count, ntz_male, ntz_female,
ntz_10, ntz_20, ntz_30, ntz_40, ntz_50, audience_score, audience_count, audience_male,
audience_female, audience_10, audience_20, audience_30, audience_40, audience_50))
}
info <- vector('list', 100)
top_100_codes <- c(get_movie_code(20220502, 1), get_movie_code(20220502, 2))
get_movie_info(top_100_codes[1])
for (i in 1:length(top_100_codes)){ # 한 줄씩 차곡차곡 쌓는다.
info[[i]] <- get_movie_info(top_100_codes[i])
}
info[[11]]
final_info <- do.call('rbind', info)
# 컬럼명을 지정함
colnames(final_info) <- c("title","code","genre","country","runtime","release",
"director","actor","view_class","audience_age_10","audience_age_20",
"audience_age_30","audience_age_40","audience_age_50",
"netizen_score","netizen_count","ntz_male","ntz_female","ntz_10",
"ntz_20","ntz_30","ntz_40","ntz_50","audience_score",
"audience_count","audience_male","audience_female","audience_10",
"audience_20","audience_30","audience_40","audience_50")
write.csv(final_info, 'movie.csv', row.names=T) # 최종 csv파일 생성함
library(tidyverse)  # why?
diamonds %>%
count(cut)
ggplot(data = smaller, mapping = aes(x = carat, colour = cut)) +
geom_freqpoly(binwidth = 0.1)
library(ggplot2)
ggplot(data = smaller, mapping = aes(x = carat, colour = cut)) +
geom_freqpoly(binwidth = 0.1)
smaller <- diamonds %>%
filter(carat < 3)
ggplot(data = smaller, mapping = aes(x = carat, colour = cut)) +
geom_freqpoly(binwidth = 0.1)
ggplot(data = smaller, mapping = aes(x = carat, colour = cut)) +
geom_freqpoly(binwidth = 0.5)
ggplot(data = smaller, mapping = aes(x = carat, colour = cut)) +
geom_freqpoly(binwidth = 1)
ggplot(data = smaller, mapping = aes(x = carat, colour = cut)) +
geom_freqpoly(binwidth = 0.1)
unusual <- diamonds %>%
filter(y < 3 | y > 20) %>%
select(price, x, y, z) %>%
arrange(y)
unusual
sample(x, size = 10, replace = FALSE)
x <- 1:100
sample(x, size = 10, replace = FALSE)
sample(X, size = 100)
sample(x, size = 100)
unique(sample(x, size = 100))
length(unique(sample(x, size = 100)))
length(unique(sample(x, size = 101)))
y <- sample(x, size = 10, replace = FALSE)
x <- 1:100
y <- sample(x, size = 10, replace = FALSE)
plot(x, y)
data(iris)
x <- 1:100
y <- sample(x, size = 10, replace = FALSE)
data(iris)
force(iris)
View(iris)
nrow(iris)
idx <- sample(1:nrow(iris), size = 50, replace = F)
idx
unique(idx)
length(unique(idx))
idx
idx <- sample(1:nrow(iris), size = 50, replace = F)
idx
length(unique(idx))
iris[idx, ]
iris[idx ]
iris[idx, ]
iris_50 <- iris[idx, ]
dim(iris_50)
head(iris_50)
idx1 <- sample(1:nrow(iris))
idx1
set.seed(100)
sample(1:20, size = 5)
set.seed(100)
sample(1:20, size = 5)
set.seed(100)
sample(1:20, size = 5)
sample(1:20, size = 5)
set.seed(100)
sample(1:20, size = 5)
set.seed(100)
sample(1:20, size = 5)
sample(1:20, size = 5)
set.seed(100)
sample(1:20, size = 5)
set.seed(100)
sample(1:20, size = 5)
set.seed(100)
sample(1:20, size = 5)
set.seed(100)
sample(1:20, size = 5)
set.seed(100)
sample(1:20, size = 5)
set.seed(100)
sample(1:20, size = 5)
set.seed(100)
sample(1:20, size = 5)
set.seed(100)
idx1 <- sample(1:nrow(iris))
set.seed(100)
idx <- sample(1:nrow(iris), size = 50, replace = F)
set.seed(100)
sample(1:20, size = 5)
set.seed(100)
sample(1:20, size = 5)
set.seed(100)
sample(1:20, size = 5)
set.seed(100)
sample(1:20, size = 5)
set.seed(100)
sample(1:20, size = 5)
set.seed(100)
sample(1:20, size = 5)
set.seed(100)
sample(1:20, size = 5)
set.seed(100)
x <- c('red', 'green', 'blue', 'black', 'white')
x
x <- c('red', 'green', 'blue', 'black', 'white')
x
x <- c('red', 'green', 'blue', 'black', 'white')
x
x <- c('red', 'green', 'blue', 'black', 'white')
x
x
x <- c('red', 'green', 'blue', 'black', 'white')
x
x <- c('red', 'green', 'blue', 'black', 'white')
x
x <- c('red', 'green', 'blue', 'black', 'white')
x
myCom = combn(x, 3)
myCom
length(myCom)
length(myCom, axis = 2)
length(myCom, axis = 1)
length(myCom)
length(myCom[1,])
5*4 / 2
length(myCom[1,]) == 5*4 / 2
col(myCom)
length(myCom[1,]) == 5*4 / 2
myCom
ncol(myCom) == 5*4 / 2
ncol(myCom)
class(myCom)
nrow(myCom)
ncol(myCom) == 5*4 / 2
for (i in 1:ncol(myCom)){
cat(com[,i], i)
}
for (i in 1:ncol(myCom)){
cat(myCom[,i], i)
}
for (i in 1:ncol(myCom)){
cat(myCom[,i], i, '\n')
}
library(cardata)
library(carData)
data(KosteckiDillon)
force(KosteckiDillon)
View(KosteckiDillon)
str(KosteckiDillon)
tot.mean <- mean(KosteckiDillon$dos)
tot_mean <- mean(KosteckiDillon$dos)
tot_mean
y <- sample(x, size = 10, replace = FALSE)
data(iris)
idx <- sample(1:nrow(iris), size = 50, replace = F)
iris_50 <- iris[idx, ]
dim(iris_50)
head(iris_50)
idx1 <- sample(1:nrow(iris))
idx1
set.seed(100)
sample(1:20, size = 5)
set.seed(100)
sample(1:20, size = 5)
x <- c('red', 'green', 'blue', 'black', 'white')
x
myCom = combn(x, 3)
myCom
ncol(myCom)
class(myCom)
nrow(myCom)
ncol(myCom) == 5*4 / 2
for (i in 1:ncol(myCom)){
cat(myCom[,i], i, '\n')
}
library(carData)
data(KosteckiDillon)
str(KosteckiDillon)
tot_mean <- mean(KosteckiDillon$dos)
tot_mean
y <- sample(x, size = 10, replace = FALSE)
data(iris)
idx <- sample(1:nrow(iris), size = 50, replace = F)
iris_50 <- iris[idx, ]
dim(iris_50)
head(iris_50)
idx1 <- sample(1:nrow(iris))
idx1
set.seed(100)
sample(1:20, size = 5)
set.seed(100)
sample(1:20, size = 5)
x <- c('red', 'green', 'blue', 'black', 'white')
x
myCom = combn(x, 3)
myCom
ncol(myCom)
class(myCom)
nrow(myCom)
ncol(myCom) == 5*4 / 2
for (i in 1:ncol(myCom)){
cat(myCom[,i], i, '\n')
}
library(carData)
data(KosteckiDillon)
str(KosteckiDillon)
tot_mean <- mean(KosteckiDillon$dos)
tot_mean
y <- sample(x, size = 10, replace = FALSE)
data(iris)
idx <- sample(1:nrow(iris), size = 50, replace = F)
iris_50 <- iris[idx, ]
dim(iris_50)
head(iris_50)
idx1 <- sample(1:nrow(iris))
idx1
set.seed(100)
sample(1:20, size = 5)
set.seed(100)
sample(1:20, size = 5)
x <- c('red', 'green', 'blue', 'black', 'white')
x
myCom = combn(x, 3)
myCom
ncol(myCom)
class(myCom)
nrow(myCom)
ncol(myCom) == 5*4 / 2
for (i in 1:ncol(myCom)){
cat(myCom[,i], i, '\n')
}
library(carData)
data(KosteckiDillon)
str(KosteckiDillon)
tot_mean <- mean(KosteckiDillon$dos)
tot_mean
tot_mean
for (rate in (1:5)*0.1) {
set.seed(100)
idx <- sample(nrow(KosteckiDillon), nrow(KosteckiDillon)*rate)
sam.data <- KosteckiDillon[idx,'dos'] # 샘플링 데이터 추출
tmp.mean <- mean(sam.data) # 샘플링 데이터 평균
cat('Diff:', rate, tot.mean-tmp.mean, '\n')
}
for (rate in (1:5)*0.1) {
set.seed(100)
idx <- sample(nrow(KosteckiDillon), nrow(KosteckiDillon)*rate)
sam_data <- KosteckiDillon[idx,'dos'] # 샘플링 데이터 추출
tmp_mean <- mean(sam_data) # 샘플링 데이터 평균
cat('Diff:', rate, tot_mean-tmp_mean, '\n')
}
library(treemap)
install.packages('treemap')
library(treemap)
treemap
treemap
treemap()
GNI2014
library(treemap)
treemap()
GNI2014
data(GNI2014)
View(GNI2014)
treemap(GNI2014,
vSize = 'population',
vColor = 'GNI',
type = 'Value',
bg.labels = 'yellow',
title = "Wolrd's GNI")
treemap(GNI2014,
index = c('continent', 'iso3')
vSize = 'population',
vColor = 'GNI',
type = 'Value',
bg.labels = 'yellow',
title = "Wolrd's GNI")
treemap(GNI2014,
index = c('continent', 'iso3'),
vSize = 'population',
vColor = 'GNI',
type = 'Value',
bg.labels = 'yellow',
title = "Wolrd's GNI")
treemap(GNI2014,
index=c('continent','iso3'), # 계층 구조 설정(대륙-국가)
vSize='population', # 타일의 크기
vColor='GNI', # 타일의 컬러
type='value', # 타일 컬러링 방법
bg.labels='yellow', # 레이블의 배경색
title="World's GNI")
library(treemap) # treemap 패키지 불러오기
st <- data.frame(state.x77) # 매트릭스를 데이터프레임으로 변환
# 주의 이름 열 stname을 추가
st <- data.frame(st, stname=rownames(st))
treemap(st,
index=c('stname'), # 타일에 주 이름 표기
vSize='Area', # 타일의 크기
vColor='Income', # 타일의 컬러
type='value', # 타일 컬러링 방법
title='USA states area and income' ) #
getwd()
setwd("C:/Users/woo/Desktop/Project/class/2022IDS")
ds <- read.csv('data/seoul_temp_2017.csv')
ds
dim(ds)
head(ds)
# (2) 서울의 1년 기온 분포
summary(ds$avg_temp)
boxplot(ds$avg_temp,
col='green',
ylim=c(-20,40),
xlab='서울 1년 기온',
ylab='기온')
# (3) 월별 기온 분포
# 월별 평균기온 계산
month.avg <- aggregate(ds$avg_temp,
by=list(ds$month),median)[2]
month.avg
month.avg <- month.avg[,1] # dataframe을 벡터로
names(month.avg) <- 1:12 # 1월~12월
# 평균기온 순위 계산 (내림차순)
odr <- rank(-month.avg)
odr
# 월별 기온 분포
boxplot(avg_temp~month, data=ds,
col=heat.colors(12)[odr], # 상자의 색을 지정
ylim=c(-20,40),
ylab='기온’,
xlab='월’,
main='서울시 월별 기온 분포(2017)')
# (3) 월별 기온 분포
# 월별 평균기온 계산
month.avg <- aggregate(ds$avg_temp,
by=list(ds$month),median)[2]
month.avg
month.avg <- month.avg[,1] # dataframe을 벡터로
names(month.avg) <- 1:12 # 1월~12월
# 평균기온 순위 계산 (내림차순)
odr <- rank(-month.avg)
odr
# 월별 기온 분포
col=heat.colors(12)[odr], # 상자의 색을 지정
# 월별 기온 분포
boxplot(avg_temp~month, data=ds,
ylim=c(-20,40),
# 월별 기온 분포
boxplot(avg_temp~month,
col=heat.colors(12)[odr], # 상자의 색을 지정
ylab='기온',
main='서울시 월별 기온 분포(2017)')
# 월별 기온 분포
boxplot(avg_temp~month,
data=ds,
col=heat.colors(12)[odr], # 상자의 색을 지정
ylim=c(-20,40),
ylab='기온',
xlab='월’,
main='서울시 월별 기온 분포(2017)')
s
s']
# 월별 기온 분포
boxplot(avg_temp~month,
data=ds,
col=heat.colors(12)[odr], # 상자의 색을 지정
ylim=c(-20,40),
ylab='기온',
xlab='월',
main='서울시 월별 기온 분포(2017)')
# 월별 기온 분포
boxplot(avg_temp~month,
data=ds,
col=heat.colors(12)[odr], # 상자의 색을 지정
ylim=c(-20,40),
ylab='기온',
xlab='월',
main='서울시 월별 기온 분포(2017)')
