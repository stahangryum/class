# 01
n <- 12
if (n%%2 == 1){  # 홀수이면 TRUE, 짝수이면 FALSE
type <- 'odd'
} else {
type <- 'even'
}
print(type)
# 02
n <- -12
source("C:/Users/woo/Downloads/김지우 7장 연습문제풀이 (1).R", encoding = 'UTF-8', echo=TRUE)
res <- ifelse(n < 0, -n, n)
res
# 03
input <- 1:10
n <- length(input)
switch <- TRUE
result <- NULL
if(switch == T){
result <- prod(input) # 첫 번째 수정 : result가 정의되지 않은 상태에서 result * i를 할 수 없다.
} else{ # 두 번째 수정 : if의 닫는 괄호와 else는 같은 줄에 있어야 한다.
result <- sum(input)
}
print(result)
if (n%%2 == 1){  # 홀수이면 TRUE, 짝수이면 FALSE
type <- 'odd'
} else {
type <- 'even'
}
print(type)
# 02
n <- -12
res <- ifelse(n < 0, -n, n)
res
# 03
input <- 1:10
n <- length(input)
switch <- TRUE
result <- NULL
if(switch == T){
result <- prod(input) # 첫 번째 수정 : result가 정의되지 않은 상태에서 result * i를 할 수 없다.
} else{ # 두 번째 수정 : if의 닫는 괄호와 else는 같은 줄에 있어야 한다.
result <- sum(input)
}
print(result)
# 04
nums = 1:20
summ = 1
for (i in nums){
if (i%%2 == 1){ # 홀수이면 FALSE
summ = summ * i
} else{
next
}
}
summ
# 05
nums = 1:20
summ = 1
count = 1
while (count <= 20){
summ = summ * nums[count]
count = count + 2
}
summ
# 06
data(mtcars)
apply(mtcars[c('mpg', 'hp', 'wt')], 2, mean)
# 07
triangle.area <- function(base, height){
S = 1/2 * base * height
return (S)
}
triangle.area(5.2, 4.6)
multiple.answer <- function(data){
res.min <- min(data)
res.max <- max(data)
res.avg <- mean(data)
result <- list(min=res.min, max=res.max, avg=res.avg)
}
result <- multiple.answer(data)
cat('min:', result$min, ', max:', result$max, ', avg:', result$avg, '\n')
result
# 1
carprice.new = read.csv('data/carprice.csv')
# 1
carprice.new = read.csv('data/carprice.csv')
str(carprice.new)
# 2
unique(carprice.new$Type)
# 3
compact.new = subset(carprice.new, Type == 'Compact' & MPG.city >= 2 ,)
compact.new
# 4
sink('compact.txt', append = TRUE)
print(compact.new)
sink()
# 5
sink('compact.txt', append = TRUE)
subset(carprice.new, Type == 'Small' & MPG.city >= 5, )
sink()
sink('compact.txt', append = TRUE)
subset(carprice.new, Type == 'Sporty' & MPG.city >= 2, )
sink()
# 1
carprice.new = read.csv('data/carprice.csv')
str(carprice.new)
# 2
unique(carprice.new$Type)
# 3
compact.new = subset(carprice.new, Type == 'Compact' & MPG.city >= 2 ,)
compact.new
# 4
sink('compact.txt', append = TRUE)
print(compact.new)
sink()
# 5
sink('compact.txt', append = TRUE)
subset(carprice.new, Type == 'Small' & MPG.city >= 5, )
sink()
sink('compact.txt', append = TRUE)
subset(carprice.new, Type == 'Sporty' & MPG.city >= 2, )
sink()
carprice.new = read.csv('data/carprice.csv')
str(carprice.new)
# 2
unique(carprice.new$Type)
# 3
compact.new = subset(carprice.new, Type == 'Compact' & MPG.city >= 2 ,)
compact.new
# 4
sink('compact.txt', append = TRUE)
print(compact.new)
sink()
# 5
sink('compact.txt', append = TRUE)
subset(carprice.new, Type == 'Small' & MPG.city >= 5, )
sink()
sink('compact.txt', append = TRUE)
subset(carprice.new, Type == 'Sporty' & MPG.city >= 2, )
sink()
getwd()
setwd("C:/Users/woo/Desktop/Project")
# 1
carprice.new = read.csv('data/carprice.csv')
str(carprice.new)
# 2
unique(carprice.new$Type)
# 3
compact.new = subset(carprice.new, Type == 'Compact' & MPG.city >= 2 ,)
compact.new
# 4
sink('compact.txt', append = TRUE)
print(compact.new)
sink()
# 5
sink('compact.txt', append = TRUE)
subset(carprice.new, Type == 'Small' & MPG.city >= 5, )
sink()
sink('compact.txt', append = TRUE)
subset(carprice.new, Type == 'Sporty' & MPG.city >= 2, )
sink()
getwd()
setwd("C:/Users/woo/Desktop/Project/class_2022IDS")
# 1
carprice.new = read.csv('data/carprice.csv')
str(carprice.new)
# 2
unique(carprice.new$Type)
# 3
compact.new = subset(carprice.new, Type == 'Compact' & MPG.city >= 2 ,)
compact.new
# 4
sink('compact.txt', append = TRUE)
print(compact.new)
sink()
# 5
sink('compact.txt', append = TRUE)
subset(carprice.new, Type == 'Small' & MPG.city >= 5, )
sink()
sink('compact.txt', append = TRUE)
subset(carprice.new, Type == 'Sporty' & MPG.city >= 2, )
sink()
